{"version":3,"sources":["api.tsx","components/deployment/slice.tsx","App.tsx","serviceWorker.ts","store/service.tsx","store/configStore.tsx","index.tsx"],"names":["instance","axios","create","baseURL","process","REACT_APP_API_ENDPOINT","DeploymentSlice","createSlice","name","initialState","deployment","fakeTimer","reducers","getDeploymentsSuccess","state","action","payload","getDeploymentsInit","actions","mapResponseDeploymentToDeployment","data","a","deployments","map","d","templateName","id","_id","version","url","deployedAt","Date","console","log","getDeployments","dispatch","get","res","InternalCountDown","distance","onTimerEnds","useState","dist","setDist","timer","hour","Math","floor","_hour","_minute","minute","_second","second","_milisecond","milisecond","cT","timerEnds","interval","clearInterval","useEffect","setInterval","className","InternalList","list","onDelete","slice","sort","b","getTime","itemLayout","dataSource","renderItem","item","Item","key","onClick","Meta","title","href","description","InternalForm","onSubmitForm","IFState","setIFState","labelCol","span","wrapperCol","layout","initialValues","onValuesChange","onFinish","validateMessages","required","types","label","templates","template","i","Button","value","find","temp","versions","ver","Option","rules","type","placeholder","offset","htmlType","App","deploymentS","useSelector","React","useDispatch","justify","flex","ev","post","orientation","query","JSON","stringify","ids","delete","params","deleteDeployments","Boolean","window","location","hostname","match","reducer","combineReducers","store","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.21282c76.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: process.env.REACT_APP_API_ENDPOINT || \"http://localhost:3030\"\r\n});\r\n\r\n\r\nexport default instance;","import { createSlice, DeepPartial } from \"@reduxjs/toolkit\";\r\nimport { IDeployment } from \"../../types/models\";\r\nimport { AppThunk } from \"../../store/configStore\";\r\nimport instance from \"../../api\";\r\n\r\ninterface DeploymentState {\r\n  deployment: IDeployment[];\r\n  fakeTimer?: boolean;\r\n}\r\n\r\nlet initialState: DeploymentState = {\r\n  deployment: [],\r\n  fakeTimer: false\r\n};\r\n\r\n\r\n\r\nconst DeploymentSlice = createSlice({\r\n  name: 'deployment',\r\n  initialState,\r\n  reducers: {\r\n    getDeploymentsSuccess: (state, action) => {\r\n      state.deployment = action.payload;\r\n      state.fakeTimer = false;\r\n    },\r\n    getDeploymentsInit: (state) => {\r\n      state.fakeTimer = true;\r\n    }\r\n  }\r\n})\r\n\r\nexport default DeploymentSlice.reducer;\r\n\r\nexport const { getDeploymentsSuccess, getDeploymentsInit } = DeploymentSlice.actions;\r\n\r\nconst mapResponseDeploymentToDeployment = async (data: any) => {\r\n  const deployments: IDeployment[] = data.map((d: IDeployment & any) =>\r\n    ({\r\n      templateName: d.templateName,\r\n      id: d._id,\r\n      version: d.version,\r\n      url: d.url,\r\n      deployedAt: new Date(d.deployedAt)\r\n    } as IDeployment))\r\n\r\n    console.log(deployments)\r\n  return deployments;\r\n}\r\n\r\nexport const getDeployments = function (): AppThunk {\r\n  return async dispatch => {\r\n    try {\r\n      const res = await instance.get(\"/deployments\");\r\n      dispatch(getDeploymentsSuccess(await mapResponseDeploymentToDeployment(res.data)));\r\n    } catch (err) {\r\n      // dispatch(loginError());\r\n    }\r\n  };\r\n};\r\n\r\nexport const createDeployments = function (data: IDeployment): AppThunk {\r\n  return async dispatch => {\r\n    try {\r\n      const res = await instance.post(\"/deployments\", data);\r\n      dispatch(getDeploymentsInit());\r\n    } catch (err) {\r\n      // dispatch(loginError());\r\n    }\r\n  };\r\n};\r\nexport const deleteDeployments = function (id: string): AppThunk {\r\n  return async dispatch => {\r\n    try {\r\n      const query = JSON.stringify({ids: id});\r\n      const res = await instance.delete(\"/deployments\", { params: { query } });\r\n      dispatch(getDeployments())\r\n    } catch (err) {\r\n      // dispatch(loginError());\r\n    }\r\n  };\r\n};","import React, { useState, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.scss';\nimport { getDeployments, createDeployments, deleteDeployments } from './components/deployment/slice';\nimport { Button, List, Skeleton, Row, Col, Divider, Form, Radio, Input, Select } from 'antd';\nimport logo from './logo.svg';\nimport { RootState } from './store/service';\nimport { IDeployment } from './types/models';\nimport { Store } from 'antd/lib/form/interface';\n\n// TODO: Refactor All\n\nconst cT = (distance: number) => {\n\n  let _distance = distance;\n\n  const _milisecond = 10, _second = _milisecond * 100, _minute = _second * 60, _hour = _minute * 60, _day = _hour * 24;\n\n  if (distance > 0) return {\n    hour: Math.floor((distance % (_day)) / (_hour)),\n    minute: Math.floor((distance % (_hour)) / (_minute)),\n    second: Math.floor((distance % (_minute)) / (_second)),\n    milisecond: Math.floor((distance % (_second)) / _milisecond)\n  }\n  return { hour: 0, minute: 0, second: 0, milisecond: 0 };\n\n}\n\nconst InternalCountDown = ({ distance, onTimerEnds }: { distance: number, onTimerEnds?: any }) => {\n\n  const [dist, setDist] = useState(distance);\n\n  const timer = cT(dist);\n\n  const timerEnds = (interval: any) => {\n    clearInterval(interval);\n    onTimerEnds();\n  }\n\n  useEffect(() => {\n    let interval: any = null;\n    interval = setInterval(() => {\n      setDist(dist => dist - 10);\n    }, 10);\n    if (dist < 0 && interval) {\n      timerEnds(interval);\n    }\n    return () => timerEnds(interval);\n  }, [dist]);\n\n  return <div className=\"container\">\n    <h1>{timer.hour}:{timer.minute}:{timer.second}:{timer.milisecond} </h1>\n  </div>\n\n\n}\n\nconst InternalList = ({ list, onDelete }: { list: IDeployment[], onDelete: Function }) => {\n\n  list = list.slice().sort((a, b) => b.deployedAt.getTime() - a.deployedAt.getTime());\n\n  return (\n    <List\n      className=\"demo-loadmore-list\"\n      // loading={initLoading}\n      itemLayout=\"horizontal\"\n      // loadMore={loadMore}\n      dataSource={list}\n      renderItem={(item: IDeployment) => (\n        <List.Item\n          actions={[<a key=\"list-loadmore-edit\" onClick={() => onDelete(item.id)}>delete</a>]}\n        >\n          <List.Item.Meta\n            title={<a href=\"https://ant.design\">{item.templateName}</a>}\n            description={\"version: \" + item.version}\n          />\n          <div>{item.url}</div>\n        </List.Item>\n      )}\n    />\n  )\n}\n\nconst InternalForm = ({ onSubmitForm }: { onSubmitForm: Function }) => {\n\n  const validateMessages = {\n    required: '${label} is required!',\n    types: {\n      url: '${label} is not validate url!',\n    }\n  };\n\n  const formIState: Partial<IDeployment> = {\n    templateName: '',\n    version: '',\n    url: ''\n  }\n\n  const [IFState, setIFState] = useState(formIState);\n\n  const onFormLayoutChange = (state: typeof formIState) => setIFState(state);\n  const submitIForm = (data: Store) => onSubmitForm(data);\n\n  return <Form\n    labelCol={{ span: 4 }}\n    wrapperCol={{ span: 14 }}\n    layout=\"horizontal\"\n    initialValues={{ templateName: '', url: '', version: '' }}\n    onValuesChange={onFormLayoutChange}\n    onFinish={submitIForm}\n    validateMessages={validateMessages}\n  >\n    <Form.Item label=\"Templates\" name=\"templateName\" >\n      <Select>\n        {templates.map((template, i) => <Radio.Button key={'_temp' + i} value={template.name}>{template.name}</Radio.Button>)}\n      </Select>\n\n    </Form.Item>\n    <Form.Item label=\"Version\" name=\"version\">\n      <Select>\n        {(templates.find(temp => temp.name === IFState.templateName) || { name: 'default', versions: [] }).versions\n          .map((ver: string, i) => (<Select.Option value={ver} key={'_ver' + i}>{ver}</Select.Option>))}\n      </Select>\n    </Form.Item>\n    <Form.Item label=\"URL\" name=\"url\" rules={[{ required: true, type: 'url' }]}>\n      <Input placeholder=\"url goes here.\" />\n    </Form.Item>\n\n    <Form.Item wrapperCol={{ offset: 8 }}>\n      <Button type=\"primary\" htmlType=\"submit\">\n        Deploy\n      </Button>\n    </Form.Item>\n  </Form>\n}\n\nfunction App() {\n\n  const deploymentS = useSelector((state: RootState) => state.deployment)\n\n  React.useEffect(() => {\n    dispatch(getDeployments());\n  }, []);\n\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"App\">\n      <Row justify=\"center\">\n        <Col flex=\"1\">\n          <InternalForm onSubmitForm={(ev: IDeployment) => dispatch(createDeployments(ev))} />\n        </Col>\n      </Row>\n      <Divider orientation=\"right\">Deployments Listed Down</Divider>\n      <Row justify=\"center\">\n        <Col>\n          { deploymentS.fakeTimer ? <InternalCountDown onTimerEnds={() => dispatch(getDeployments())} distance={30000} /> : null}\n          <InternalList onDelete={(id: string) => dispatch(deleteDeployments(id))} list={deploymentS.deployment} />\n        </Col>\n      </Row>\n\n    </div>\n  );\n}\n\nexport default App;\n\n\nconst templates = [\n  {\n    \"name\": \"Natural One\",\n    \"versions\": [\n      \"1.0.0\",\n      \"1.0.1\",\n      \"1.1.0\",\n      \"2.0.0\"\n    ]\n  },\n  {\n    \"name\": \"Techno 01\",\n    \"versions\": [\n      \"1.0.0\",\n      \"1.1.1\",\n      \"2.0.1\"\n    ]\n  },\n  {\n    \"name\": \"Sporty\",\n    \"versions\": [\n      \"1.0.0\",\n      \"1.1.0\",\n      \"1.2.0\",\n      \"1.2.1\",\n      \"1.3.0\",\n      \"2.0.0\"\n    ]\n  }\n]","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport deployment  from \"./../components/deployment/slice\";\r\n\r\nconst reducer = combineReducers({\r\n  deployment\r\n});\r\n\r\nexport type RootState = ReturnType<typeof reducer>;\r\nexport default reducer;\r\n","import { configureStore, Action } from \"@reduxjs/toolkit\";\r\nimport reducer, { RootState } from \"./service\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\n\r\nconst store = configureStore({\r\n    reducer\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/configStore';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}